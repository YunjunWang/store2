{
	"info": {
		"_postman_id": "cd501698-846a-4b5f-ae81-591825aa0764",
		"name": "Store",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "67018"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"const jsonData = pm.response.json()",
									"console.log(\"name: \" + jsonData.name)",
									"pm.environment.set(\"user_id\", jsonData.id);",
									"pm.environment.set(\"user_email\", '\"' + jsonData.email +'\"');",
									"console.log(\"user_id: \" + pm.environment.get(\"user_id\"));",
									"console.log(\"user_email: \" + pm.environment.get(\"user_email\"));",
									"console.log(\"user_password: \" + pm.environment.get(\"user_password\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jsonData = pm.request.body;",
									"console.log(\"name: \" + jsonData.name);",
									"pm.environment.set(\"user_email\", '\"' + jsonData.email + '\"');",
									"console.log(\"user_email: \" + pm.environment.get(\"user_email\"));",
									"console.log(\"user_password: \" + pm.environment.get(\"user_password\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Yunjun23\",\n    \"email\": \"yunjun23@example.com\",\n    \"password\": {{user_password}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Register user - validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"  \",\n    \"email\": \"yunjunexample.com\",\n    \"password\": \"12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Register user with customised validation error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Sleepy\",\n    \"email\": \"yunjun@example.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Login User ADMIN role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Login request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    var responseData = pm.response.json();",
									"    pm.environment.set(\"access_token\", responseData.accessToken);",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"    ",
									"    var headers = pm.response.headers.all();",
									"\tvar firstHeaderItem = headers[0].value;",
									"\tvar cookieItems = firstHeaderItem.split(';');",
									"\tvar firstItem = cookieItems[0];",
									"\tvar refresh_token = firstItem.replace(\"refreshToken=\", \"\").replace(\";\", \"\");",
									"\t// var refresh_token = JSON.parse(refreshTokenStr);",
									"\tpm.environment.set(\"refresh_token\", refresh_token);",
									"    console.log(\"refresh_token: \" + pm.environment.get(\"refresh_token\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check user_email and user_password pre POST Login\", function () {",
									"    pm.environment.set(\"user_email\", pm.environment.get(\"user_email\").replace(\"20\", \"21\"));",
									"    console.log(\"user_email: \" + pm.environment.get(\"user_email\"));",
									"    console.log(\"user_password: \" + pm.environment.get(\"user_password\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{user_email}},\n    \"password\": {{user_password}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "access all users by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "access all users by admin - 401 unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Login User USER role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Login request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    var responseData = pm.response.json();",
									"    pm.environment.set(\"access_token\", responseData.accessToken);",
									"    ",
									"    var headers = pm.response.headers.all();",
									"\tvar firstHeaderItem = headers[0].value;",
									"\tvar cookieItems = firstHeaderItem.split(';');",
									"\tvar firstItem = cookieItems[0];",
									"\tvar refresh_token = firstItem.replace(\"refreshToken=\", \"\").replace(\";\", \"\");",
									"\t// var refresh_token = JSON.parse(refreshTokenStr);",
									"\tpm.environment.set(\"refresh_token\", refresh_token);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Check user_email and user_password pre POST Login\", function () {",
									"    pm.environment.set(\"user_email\", pm.environment.get(\"user_email\").replace(\"21\", \"20\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{user_email}},\n    \"password\": {{user_password}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "access all users by admin - 403 unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful GET all users request\", function () {",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST refresh access token request\", function () {",
									"pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"    var responseData = pm.response.json();",
									"    pm.environment.set(\"access_token\", responseData.accessToken);",
									"    console.log(\"refreshed access_token: \" + pm.environment.get(\"access_token\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Refresh access_token POST request\", function () {",
									"    // console.log(\"current refresh_token: \" + pm.environment.get(\"refresh_token\"));",
									"    const jar = pm.cookies.jar();",
									"    jar.set(\"localhost\", \"refreshToken\", pm.environment.get(\"refresh_token\"), (error, cookie) => {",
									"        // if (error) {",
									"        //     console.error(`An error occurred: ${error}`);",
									"        // } else {",
									"        //     console.log(`refreshToken saved: ${cookie}`);",
									"        // }",
									"    });",
									"",
									"    jar.get(\"localhost\", \"refreshToken\", (error, cookie) => {",
									"        if (error) {",
									"            console.error(`An error occurred: ${error}`);",
									"        } else {",
									"            console.log(`refreshToken saved: ${cookie}`);",
									"        }",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "access current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET current user request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Validate jwt token - deprecated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"user_email: \" + pm.environment.get(\"user_email\"));",
									"console.log(\"user_password: \" + pm.environment.get(\"user_password\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{jwt_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"validate"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"current user_email: \" + pm.environment.get(\"user_email\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Yunjun\",\n    \"email\": {{user_email}},\n    \"oldPassword\": {{user_password}},\n    \"newPassword\": \"newPassword\",\n    \"confirmedPassword\": \"newPassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"change-password"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Yunjun2\",\n    \"email\": \"yunjun@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "Get products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "12345",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/products?categoryId=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "categoryId",
									"value": ""
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 899.0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - price 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - price -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - name empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \" \",\n    \"description\": \"The latest iPhone\",\n    \"price\": 899.0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - name null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    // \"name\": \" \",\n    \"description\": \"The latest iPhone\",\n    \"price\": 899.0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone141111111111111111111111111111111111111111111111111123gffffffffffffffffffffffffkgfglfgfjglfjglfjglfjglfjgprplreporegrepgjprejgprejgporegporepogrepogjporegporegporejgrejgperjgporegporepogreopgjoprejgprejgpoerjgporejgporejgporejpgorepogrepogjregjrepojgrepojgjrdojdfgjdlkjgdlkjfgljgljgrejgrejgerjgrejglrejgrejgprejgjrekgrekglkrejglrejglkerjglerjgperpoeirtoitr34irtowejfdkfjdfdjfkdjfkdjfdfldfldkfldkfldkfldkfldfldfkdfkdlfdklfkdlfkdlfkdlfkdlfkdlkfldkfldfldflkdlfkldfldkfdlkfdfgf\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 899.0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - price null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    // \"price\": 0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - categoryId -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 0,\n    \"categoryId\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - categoryId null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"product_id\", jsonData.id);",
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 0\n    // \"categoryId\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"product_id: \" + pm.environment.get(\"product_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{product_id}},\n    \"name\": \"iPhone14\",\n    \"description\": \"The latest iPhone\",\n    \"price\": 901.0,\n    \"categoryId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cart",
			"item": [
				{
					"name": "carts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "cart by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"console.log(\"id: \" + jsonData.id)",
									"pm.environment.set(\"cart_id\", jsonData.id);",
									"console.log(\"cart_id: \" + pm.environment.get(\"cart_id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item - product not found",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item - product null - doesn't trigger method argument exception, why?",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "add cart item - product id -1 - doesn't trigger method argument exception, why?",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "update cart item",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update cart item - quantity null",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    // \"quantity\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update cart item - quantity 0",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update cart item - product not in cart",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{invalid_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{invalid_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update cart item - cart not found",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/{{invalid_cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{invalid_cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cart item",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cart item - product not in cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items/{{invalid_product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items",
								"{{invalid_product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cart item - cart not found",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{invalid_cart_id}}/items/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{invalid_cart_id}}",
								"items",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "clear cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "clear cart - cart not found",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{invalid_cart_id}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{invalid_cart_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cart - cart not found",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/{{cart_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"{{cart_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIzMCIsIm5hbWUiOiJZdW5qdW4yMCIsImVtYWlsIjoieXVuanVuMjBAZXhhbXBsZS5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc0NzgxNjY1MCwiZXhwIjoxNzQ3ODIzODUwfQ.BkwlxtiO8Lj70sElInwtXgsnMdjlKT8ZSQQ3Yu8r_xbqXx3vm1pVZxEIMkGGGTDsLt27gvRr-jWCoJfOY0Jevw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cart_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkout cart_id not uuid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIzMCIsIm5hbWUiOiJZdW5qdW4yMCIsImVtYWlsIjoieXVuanVuMjBAZXhhbXBsZS5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc0NzgxNjY1MCwiZXhwIjoxNzQ3ODIzODUwfQ.BkwlxtiO8Lj70sElInwtXgsnMdjlKT8ZSQQ3Yu8r_xbqXx3vm1pVZxEIMkGGGTDsLt27gvRr-jWCoJfOY0Jevw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cart_id_not_uuid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkout cart_id not exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIzMCIsIm5hbWUiOiJZdW5qdW4yMCIsImVtYWlsIjoieXVuanVuMjBAZXhhbXBsZS5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc0NzgxNjY1MCwiZXhwIjoxNzQ3ODIzODUwfQ.BkwlxtiO8Lj70sElInwtXgsnMdjlKT8ZSQQ3Yu8r_xbqXx3vm1pVZxEIMkGGGTDsLt27gvRr-jWCoJfOY0Jevw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cart_id_not_exist}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkout cart_id_empty_cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIzMCIsIm5hbWUiOiJZdW5qdW4yMCIsImVtYWlsIjoieXVuanVuMjBAZXhhbXBsZS5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc0NzgxNjY1MCwiZXhwIjoxNzQ3ODIzODUwfQ.BkwlxtiO8Lj70sElInwtXgsnMdjlKT8ZSQQ3Yu8r_xbqXx3vm1pVZxEIMkGGGTDsLt27gvRr-jWCoJfOY0Jevw",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": \"{{cart_id_empty_cart}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/checkout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"checkout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?sort=user_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "user_id"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "get orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful POST checkout request\", function () {",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": {{cart_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful POST checkout request\", function () {",
									"    console.log(\"access_token: \" + pm.environment.get(\"access_token\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartId\": {{cart_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"8"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}